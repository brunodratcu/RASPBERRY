# font.py - Fonte Bitmap para Display LCD
"""
Fonte bitmap 8x8 para display LCD Magic Mirror
Suporte a caracteres latinos, n√∫meros e s√≠mbolos especiais
"""

# Fonte bitmap 8x8 - cada caractere √© representado por 8 bytes
FONT_8X8 = {
    # N√öMEROS
    '0': [0x3C, 0x66, 0x6A, 0x72, 0x66, 0x66, 0x3C, 0x00],
    '1': [0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00],
    '2': [0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00],
    '3': [0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00],
    '4': [0x06, 0x0E, 0x1E, 0x66, 0x7F, 0x06, 0x06, 0x00],
    '5': [0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00],
    '6': [0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00],
    '7': [0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00],
    '8': [0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00],
    '9': [0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00],
    
    # S√çMBOLOS B√ÅSICOS
    ':': [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00],
    '/': [0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00],
    '-': [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00],
    '.': [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
    ',': [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30],
    '!': [0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00],
    '?': [0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00],
    ' ': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    
    # MAI√öSCULAS
    'A': [0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
    'B': [0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00],
    'C': [0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00],
    'D': [0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00],
    'E': [0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00],
    'F': [0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00],
    'G': [0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00],
    'H': [0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
    'I': [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00],
    'J': [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00],
    'K': [0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00],
    'L': [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00],
    'M': [0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00],
    'N': [0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00],
    'O': [0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    'P': [0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00],
    'Q': [0x3C, 0x66, 0x66, 0x66, 0x6A, 0x6C, 0x36, 0x00],
    'R': [0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00],
    'S': [0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00],
    'T': [0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00],
    'U': [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    'V': [0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
    'W': [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
    'X': [0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00],
    'Y': [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00],
    'Z': [0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00],
    
    # MIN√öSCULAS
    'a': [0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00],
    'b': [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00],
    'c': [0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x00],
    'd': [0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00],
    'e': [0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00],
    'f': [0x0E, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00],
    'g': [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C],
    'h': [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00],
    'i': [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00],
    'j': [0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x66, 0x3C],
    'k': [0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00],
    'l': [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00],
    'm': [0x00, 0x00, 0x66, 0x7F, 0x7F, 0x6B, 0x63, 0x00],
    'n': [0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00],
    'o': [0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    'p': [0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60],
    'q': [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06],
    'r': [0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00],
    's': [0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00],
    't': [0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x0E, 0x00],
    'u': [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00],
    'v': [0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
    'w': [0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00],
    'x': [0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00],
    'y': [0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x0C, 0x78],
    'z': [0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00],
    
    # CARACTERES ESPECIAIS PORTUGU√äS
    '√£': [0x36, 0x6C, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00],
    '√É': [0x36, 0x6C, 0x18, 0x3C, 0x66, 0x7E, 0x66, 0x00],
    '√°': [0x18, 0x0C, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00],
    '√Å': [0x18, 0x0C, 0x18, 0x3C, 0x66, 0x7E, 0x66, 0x00],
    '√ß': [0x00, 0x00, 0x3C, 0x60, 0x60, 0x3C, 0x18, 0x30],
    '√á': [0x3C, 0x66, 0x60, 0x60, 0x60, 0x3C, 0x18, 0x30],
    '√©': [0x18, 0x0C, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00],
    '√â': [0x18, 0x0C, 0x7E, 0x60, 0x78, 0x60, 0x7E, 0x00],
    '√™': [0x18, 0x24, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00],
    '√≠': [0x18, 0x0C, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00],
    '√≥': [0x18, 0x0C, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    '√ì': [0x18, 0x0C, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    '√¥': [0x18, 0x24, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    '√î': [0x18, 0x24, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    '√µ': [0x34, 0x58, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    '√ï': [0x34, 0x58, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
    '√∫': [0x18, 0x0C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00],
    '√ö': [0x18, 0x0C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    
    # S√çMBOLOS EXTRAS
    '(': [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00],
    ')': [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00],
    '[': [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00],
    ']': [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00],
    '+': [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00],
    '=': [0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00],
    '_': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00],
    
    # EMOJIS SIMPLES (8x8)
    'üìç': [0x18, 0x3C, 0x7E, 0x7E, 0x7E, 0x3C, 0x18, 0x00],  # Pin de localiza√ß√£o
    '‚ö†': [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],   # Aviso
    '‚úì': [0x00, 0x02, 0x06, 0x0C, 0x58, 0x30, 0x20, 0x00],   # Check
    '‚úó': [0x00, 0x42, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x42],   # X
    '‚óè': [0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00],   # Bullet
}

# Caracteres de fallback para acentos n√£o implementados
ACCENT_FALLBACKS = {
    '√¢': 'a', '√†': 'a', '√§': 'a',
    '√Ç': 'A', '√Ä': 'A', '√Ñ': 'A',
    '√™': 'e', '√®': 'e', '√´': 'e',
    '√ä': 'E', '√à': 'E', '√ã': 'E',
    '√Æ': 'i', '√¨': 'i', '√Ø': 'i',
    '√é': 'I', '√å': 'I', '√è': 'I',
    '√¥': 'o', '√≤': 'o', '√∂': 'o',
    '√î': 'O', '√í': 'O', '√ñ': 'O',
    '√ª': 'u', '√π': 'u', '√º': 'u',
    '√õ': 'U', '√ô': 'U', '√ú': 'U',
    '√±': 'n', '√ë': 'N',
    '√Ω': 'y', '√ù': 'Y',
}

def get_char_bitmap(char):
    """
    Retorna o bitmap de um caractere
    """
    # Tentar obter o caractere diretamente
    if char in FONT_8X8:
        return FONT_8X8[char]
    
    # Tentar fallback para acentos
    if char in ACCENT_FALLBACKS:
        fallback_char = ACCENT_FALLBACKS[char]
        if fallback_char in FONT_8X8:
            return FONT_8X8[fallback_char]
    
    # Retornar espa√ßo como fallback final
    return FONT_8X8[' ']

def get_text_width(text, scale=1):
    """
    Calcula a largura de um texto em pixels
    """
    return len(text) * 8 * scale

def get_text_height(scale=1):
    """
    Retorna a altura da fonte em pixels
    """
    return 8 * scale

def split_text_to_fit(text, max_width, scale=1):
    """
    Divide texto para caber em uma largura espec√≠fica
    """
    char_width = 8 * scale
    max_chars = max_width // char_width
    
    if len(text) <= max_chars:
        return [text]
    
    words = text.split(' ')
    lines = []
    current_line = []
    current_length = 0
    
    for word in words:
        word_length = len(word) + (1 if current_line else 0)  # +1 para espa√ßo
        
        if current_length + word_length <= max_chars:
            current_line.append(word)
            current_length += word_length
        else:
            if current_line:
                lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
            else:
                # Palavra muito longa - quebrar no meio
                while len(word) > max_chars:
                    lines.append(word[:max_chars])
                    word = word[max_chars:]
                if word:
                    current_line = [word]
                    current_length = len(word)
    
    if current_line:
        lines.append(' '.join(current_line))
    
    return lines

def center_text_x(text, display_width, scale=1):
    """
    Calcula posi√ß√£o X para centralizar texto
    """
    text_width = get_text_width(text, scale)
    return (display_width - text_width) // 2

def has_char(char):
    """
    Verifica se um caractere est√° dispon√≠vel na fonte
    """
    return char in FONT_8X8 or char in ACCENT_FALLBACKS

def get_available_chars():
    """
    Retorna lista de caracteres dispon√≠veis
    """
    return list(FONT_8X8.keys()) + list(ACCENT_FALLBACKS.keys())

def normalize_text(text):
    """
    Normaliza texto substituindo caracteres n√£o suportados
    """
    result = []
    for char in text:
        if has_char(char):
            result.append(char)
        else:
            # Tentar remover acentos b√°sicos
            replacements = {
                'ƒÅ': 'a', 'ƒì': 'e', 'ƒ´': 'i', '≈ç': 'o', '≈´': 'u',
                'ƒÄ': 'A', 'ƒí': 'E', 'ƒ™': 'I', '≈å': 'O', '≈™': 'U',
            }
            result.append(replacements.get(char, '?'))
    
    return ''.join(result)

# Teste da fonte (quando executado diretamente)
if __name__ == "__main__":
    print("Teste da fonte bitmap 8x8")
    print("=" * 40)
    
    # Testar alguns caracteres
    test_chars = "0123456789ABCabc:/"
    print(f"Caracteres de teste: {test_chars}")
    
    for char in test_chars:
        bitmap = get_char_bitmap(char)
        print(f"'{char}': {bitmap}")
    
    # Testar caracteres especiais
    test_special = "√£√ß√©√É√á√â"
    print(f"\nCaracteres especiais: {test_special}")
    
    for char in test_special:
        if has_char(char):
            print(f"'{char}': ‚úì Dispon√≠vel")
        else:
            print(f"'{char}': ‚úó N√£o dispon√≠vel")
    
    # Testar largura de texto
    test_text = "MAGIC MIRROR"
    width = get_text_width(test_text, 2)
    print(f"\nTexto: '{test_text}'")
    print(f"Largura (escala 2x): {width} pixels")
    
    # Testar quebra de linha
    long_text = "Este √© um texto muito longo que precisa ser quebrado"
    lines = split_text_to_fit(long_text, 160, 1)  # 160px de largura
    print(f"\nTexto longo quebrado:")
    for i, line in enumerate(lines):
        print(f"Linha {i+1}: '{line}'")